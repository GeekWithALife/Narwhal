----------------------------
-- Narwhal Modules System --
----------------------------

General Info:
	Narwhal Modules are basically like glorified plugins.
	Modules are encapsulated, and any errors produced by them will get intercepted by a protected call before they can harm your gamemode.
	You can add hooks to your modules, but not with hook.Add. You need to use MODULE:Hook( hook, uniquename, func ).

Narwhal Functions:
	NARWHAL.IncludeModule( moduleName, bRef )
		Use this to get access to a module's table.
		When bRef is true, it will return a reference of the module table, but this is not recommended.
		Otherwise, it will pass a copy of the table, which allows you to use modules as instances of themselves. This is a much safer way of accessing modules.
	NARWHAL.GetModule( moduleName )
		This returns a reference of a module's table.
	NARWHAL.GetModules()
		This returns the table containing all registered modules.

MODULE Functions:
	MODULE.Require( moduleName )
		Use this inside your modules whenever you want to use another module.
		These should be declared before any module hooks are called.
	MODULE:Hook( hookName, uniqueName, func )
		Calling hook.Add doesn't work when modules are being loaded, so you need to use this instead.
	MODULE:UnHook( hookName, uniqueName )
		Use this instead of hook.Remove.
	MODULE:HookAll()
		Hooks all the module hooks for this module.
	MODULE:UnHookAll()
		Unhooks all the module hooks for this module. You can rehook them by using MODULE:HookAll().
	MODULE:GetDependency( moduleName )
		Returns MODULE.Dependency[moduleName], which is the module table for that dependency.
	MODULE:Init()
		Called after the modules have been loaded.
	MODULE:__Call( funcName, ... )
		DO NOT CALL THIS! It is called internally to protect the execution of all non-hooked module methods.
	MODULE:__GenerateFunctionCalls()
		DO NOT CALL THIS! It is called internally to generate a list of functions to be used by MODULE:__Call( funcName, ... ).
	 MODULE:__GenerateHooks()
		DO NOT CALL THIS! It is called internally to automatically hook MODULE methods that are named as gamemode hooks. This will only work if MODULE.AutoHook is true.
		
MODULE Values:
	MODULE.__ModuleHooks - Table containing module hook data.
	MODULE.__Dependencies - This is nil by default. When MODULE.Require is called, it becomes a table containing the names of all module dependencies.
	MODULE.__Functions - Table containing a copy of every custom function that is a member of the MODULE table. This is used for protected calls on module functions.
	MODULE.__Protected - Table containing the names of functions in the MODULE table that are restricted from use in MODULE:__Call( funcName, ... ).
	MODULE.Name - The reference name of the module. This is what you'd use in NARWHAL.IncludeModule or MODULE.Require.
	MODULE.Title - The nice-name of the module.
	MODULE.Author - The name of the author.
	MODULE.Contact - The author's contact.
	MODULE.Purpose - The module's purpose.
	MODULE.Config - This table will be accessible from the NARWHAL.Config.Modules[moduleName] table. Anything in the corresponding NARWHAL.Config table will get overwritten in the module.
	MODULE.ConfigName - Choosing a unique name here will allow you to enable/disable this module from Narwhal's Config table, and also generate ConVars that correspond to the configurations.
	MODULE.AutoHook - Making this false will keep this module from automatically hooking MODULE methods that have the same name as gamemode hooks (Think, Initialize, etc).
	MODULE.Dependency - This table contains the dependency tables of all the module's dependencies indexed by name. These tables can also be accessed via MODULE:GetDependency( moduleName ).
	
The MODULE Structure:
	Check out example.lua from the gamemode/modules folder.

Using Module Dependencies:
	-- Lets take a simple module structure:
	MODULE.Name = "myexamplemodule"
	MODULE.Title = "Example Module"
	MODULE.Author = "Grea$eMonkey"
	MODULE.Contact = "geekwithalife@gmail.com"
	MODULE.Purpose = "Let's talk about dependencies!"
	
	-- And add some requires to it:
	MODULE.Require( "somemodule1" )
	MODULE.Require( "somemodule2" )
	MODULE.Require( "mylulzymodule" )
	
	-- Now in our MODULE:Init() function...
	function MODULE:Init()
		
		-- We have a couple of ways of getting our dependencies
		-- Lets say somemodule1 has a method in it called PrintInfo that prints it's Title and Author.
		self.Dependency["somemodule1"]:PrintInfo() -- This calls that method.
		
		-- The second way of getting dependencies is using MODULE:GetDependency( name )
		self:GetDependency("somemodule2"):DoSomething() -- This calls the DoSomething method from somemodule2, assuming it exists.
		
		-- We can be more productive by doing something like this:
		local lulz = self:GetDependency("mylulzymodule")
		lulz:PrintSomething( "Something" )
		lulz:DoThisCoolThing()
		print( lulz.Name, lulz.Title, lulz.Author )
		
		-- As you can see, there's a lot you can do with dependencies.
		
	end
	
How it works:
	- TODO -
	
	
	
	